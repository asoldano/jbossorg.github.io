{
  "title": "Securing LRA endpoints using JWT",
  "link": "https://jbossts.blogspot.com/2022/01/securing-lra-endpoints-using-jwt.html",
  "author": [
    {
      "name": "Mayank Kunwar",
      "avatar": null
    }
  ],
  "date": "2022-01-05T13:26:00.000Z",
  "feed_title": "Narayana team blog",
  "content": "INTRODUCTION  JWT stands for JSON Web Token, which is a popular way to do user authorization in web application and is also popular in the context of micro-services. So, when we use Long Running Actions (LRA) in any micro-service, the transaction APIs could be authorized using JWT tokens. Open industry standard specification  outlines how JTW is structured and how to use it. JWT works over HTTP protocol. The reason JWT is now a days preferred more is because it makes the authorization mechanism easier for micro-service applications, avoids single point of failure and also helps the application design to be more scalable.  Here is how JWT is structured: [<HEADER>.<PAYLOAD>.<SIGNATURE>]  The JWT token is divided into three parts, as we can see in the above example which are separated by two periods.      1: HEADER    -> base64UrlEncode(header)     2: PAYLOAD   -> base64UrlEncode(payload)     3: SIGNATURE -> encryptionAlgorithm(base64UrlEncode(header) + '.' + base64UrlEncode(payload),256-bit-SECRET)  You can create your own JWT token by visiting website . JWT is a value token, which will only contain the user information in PAYLOAD, with the name of type of algorithm used in the HEADER and  the token verification signature in the SIGNATURE part.       The above figure shows the implication of JWT. The server will create JWT token and will give it to the client, so that client can send it back on the subsequent request. Once the JWT token is created and provided to the client, we can do a REST call to  as below:   curl -H \"Authorization:Bearer [<HEADER>.<PAYLOAD>.<SIGNATURE>]\" http://127.0.0.1:8080/app/api   SECURING LRA ENDPOINTS  There are various LRA annotations used, which will internally call the REST APIs that are present in  and  classes. So, below are the recommendations to, how to define roles for each and every APIs in order to create JWT token for client.    LRA-endPointsAllowed-roles client client  client client  client client  client client  client client  system system  system admin  admin admin  admin admin    One of the popular tool that could be used to generate JWT tokens would be . Keycloak is an open source identity and access management solution. For more details about Keycloak you can also visit .   PROBLEMS WITH JWT AND THEIR SOLUTIONS    1. Anyone can read first two parts of JWT tokens, i.e. HEADER and PAYLOAD, which are only base64 encoded. So, the PAYLOAD part must not contain any confidential information. It should contain enough information so that server could know who the user is.   2. If someone steals your JWT token, it will work for anyone. So in order to avoid the theft, we should be careful about how we are transmitting JWT. It has to be HTTPS connection and by using the process of  which comes with its own security and protection to make sure people don't steal JWT tokens.   3. In compare to session based authentication, if someone steals sessionID, we can log off, which ends the session and it doesn't exist anymore. But in case of JWT there is nothing on the server to end. Since the whole information is inside JWT, we only set expiration for JWT by having expiry PAYLOADs, but we cannot log off. This situation can be handled by creating blacklisted JWTs table at server side and when the request comes to server, that JWT token will be validated if not the blacklisted one then the server will authorize the request if the token had valid signature.    4. If we choose to use Expiry JWT token for LRA, then if the transaction did not complete before the token expiration, then transaction will never complete. So avoid using Expiry JWT tokens with LRA and try to follow above three ways in order to avoid the security breaches.  "
}