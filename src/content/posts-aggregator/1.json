{
  "title": "Keycloak 19.0.0 released",
  "link": "https://www.keycloak.org/2022/07/keycloak-1900-released",
  "author": [
    {
      "name": null,
      "avatar": null
    }
  ],
  "date": "2022-07-27T00:00:00.000Z",
  "feed_title": "Keycloak Blog",
  "feed_avatar": "https://www.gravatar.com/avatar/87fe00619f08c241da8dfb23d907ffa2?s=50",
  "content": "To download the release go to .   RELEASE NOTES   OPENID CONNECT AND SAML ADAPTERS END-OF-LIFE  Some Keycloak OpenID Connect adapters have reached end-of-life and are not included in this release.  FUSE 6 AND 7 (OPENID CONNECT)  Keycloak will no longer be providing adapters for Fuse 6 or 7. If you need adapters for Fuse please leverage 7.x adapters.  JBOSS AS 7 AND EAP 6 (OPENID CONNECT AND SAML)  JBoss AS 7 has been unmaintained for a very long time. If you are still using JBoss AS 7 we recommend migrating to WildFly and leveraging the native OIDC support in WildFly.  Red Hat customers using Red Hat JBoss Enterprise Application Platform 6.x should use 7.x adapters. These can be used in combination with the Keycloak server.  JETTY 9.2 AND 9.3 (OPENID CONNECT AND SAML)  Jetty 9.2 reached end of life in 2018, while Jetty 9.3 reached end of life in 2020. If you are still using these versions we recommend upgrading to Jetty 9.4 as soon as possible.  SPRING BOOT 1 (OPENID CONNECT)  Spring Boot 1.x reached end of life in 2019. If you are still using Spring Boot 1 we recommend upgrading to Spring Boot 2 as soon as possible.  WILDFLY LEGACY SECURITY LAYER (OPENID CONNECT AND SAML)  In WildFly 25 the legacy security layer was removed, going forward only Elytron will be supported. We recommend anyone using an older version of WildFly to upgrade and leverage native OIDC support in WildFly.  Red Hat customers using Red Hat JBoss Enterprise Application Platform 7.x should use 7.x adapters. These can be used in combination with the Keycloak server.   NEW ADMIN CONSOLE GRADUATION  The new Admin Console is now graduated to the default admin console, with the old console now deprecated. The old console will not be removed in Keycloak 21.   CHANGES IN KEYCLOAK STORAGE  The Keycloak storage is changing, and the current storage, while still supported, will eventually be replaced with a brand-new implementation. This change brings better support for cloud-native storages, no-downtime abilities, and better support for implementing custom storages for additional areas apart from users.  It means several deep changes in the supported features of the current store will become legacy features. The legacy store and the new store cannot be used simultaneously; only one store can be active at a time.  The most visible change is that the User Storage SPI is incompatible with the new storage API, the Map Storage API. Thus, the User Storage SPI will be deprecated with legacy store and will move to a separate module called keycloak-model-legacy. This change impacts several areas, especially areas related to user federation and custom user providers.  Furthermore, APIs have been consolidated so that the details of the storage layer will be transparent to the REST service layer. Specifically, the services will not be able to differentiate cached and non-cached objects, nor specifically access federated versus local storage.  Hence, custom extensions that access objects in local storage or cache through KeycloakSession methods must be reviewed. See for details.   OIDC LOGOUT CHANGES  In the previous release, we added support for OIDC logout. This release contains a few other fixes and polishing. The highlights include:   * Support for the client_id parameter, which was added in recent draft of the    OIDC RP-Initiated Logout specification. As a result, no need exists to use    the Consent Required flag of the client to show the logout confirmation    screen.   * Configuration option Valid Post Logout Redirect URIs added to the OIDC    client. This change is aligned with the OIDC specification, which allows you    to use a different set of redirect URIs for redirect after login and logout.    Value + used for Valid Post Logout Redirect URIs means that the logout will    use the same set of redirect URIs as specified by the option of Valid    Redirect URIs. This change also matches the default behavior when migrating    from a previous version due to backwards compatibility.  For more details, see the .   UPDATE EMAIL WORKFLOW  There is new preview feature UPDATE_EMAIL. When it is enabled and corresponding flag enabled in the realm, the users will be required to confirm updating their email by clicking the link, which will be sent to their new email address. For more details, see the . Thanks to for the contribution.   DEPRECATED PODDISRUPTIONBUDGET IN THE LEGACY KEYCLOAK OPERATOR  With this release, we have deprecated podDisruptionBudget field in the Keycloak CR of the . This optional field will be ignored when the Operator is deployed on Kubernetes version 1.25 and higher.  As a workaround, you can manually create the Pod Disruption Budget in your cluster, for example:  apiVersion: policy/v1 kind: PodDisruptionBudget metadata:   labels:     app: keycloak   name: keycloak spec:   maxUnavailable: 1   selector:     matchLabels:       component: keycloak  See also the .   MIGRATION FROM 18.0  Before you upgrade remember to backup your database. If you are not on the previous release refer to for a complete list of migration changes.   NEW ADMIN CONSOLE IS NOW THE DEFAULT CONSOLE  The new admin console is now the default console in Keycloak. If you are not able to start using the new admin console it is possible to continue to use the old admin console by disabling the new console, by for example running:  bin/kc.sh start-dev --features-disabled=admin2  An alternative approach to continue using the old admin console is to set the theme for the master realm or any other realm to keycloak.  As the new admin console is signficiantly different to the old admin console, is now based on React and uses a newer version of PatternFly, any custom themes will most likely have to be re-implemented from scratch. To create a custom theme for the new admin console the theme should extend keycloak.v2 instead of keycloak.  If you have explicitly set the admin console theme to keycloak for the master realm or any other realm, it will continue to use the old admin console. To update to the new admin console you need to change the theme to keycloak.v2.  The old admin console will be removed in Keycloak 21.   CHANGES TO THE SERVER CONFIGURATION AND STARTUP  Before this release, you would use the --auto-build when running the start command to tell the server to conditionally run a build if any build option has changed prior to starting the server.  In this release, the --auto-build flag is deprecated and you no longer need to use it to indicate that you want to set build options when starting the server. Instead, the server is always going to run a build by default prior to starting the server if any build option has changed. The new behavior improves the overall experience when configuring and starting the server by making it optional, although highly recommended, to run a build command beforehand in order to achieve the best startup time and memory footprint.  Now, in order to achieve the best startup time and memory footprint, set the --optimized option to disable the new default behavior. The --optimized flag tells the server that checking for and running a build directly as part of the startup is not needed:  kc.sh start --optimized  If you are already using a custom image to set build options and run an optimized Keycloak container, make sure you set the --optimized option when invoking the start command.  For more details, please take a look at the and the .   POTENTIALLY BREAKING CHANGES TO THE HEALTH ENDPOINTS  Before Keycloak 19.0.0, the quarkus based Keycloak distribution always enabled the following non-application endpoints unintentionally:   * /q/health   * /q/health/live   * /q/health/ready   * /q/metrics  Starting in Keycloak 19.0.0, these endpoints are disabled and a request will result in a 404 HTTP status-code. If you are using the /q/… endpoints, make sure to change your probes and monitoring systems to use the intended health endpoints instead when upgrading to Keycloak 19.0.0.  The intended health endpoints are:   * /health   * /health/live   * /health/ready   * /metrics  Apart from disabling the /q/ endpoints, these are the other improvements made to the health endpoints:   * The health/live endpoint used for liveness probes is now decoupled from the    database connections health, to match current good practices and to not have    the same behaviour as the health/ready endpoint. As a result, the database    check is not shown in the checks: array anymore when calling /health/live, so    when there is a database hiccup, the liveness probe will still return HTTP    status-code 200 and a status of UP, so no pod restart may be triggered.   * The health/ready endpoint used for readiness probes still checks for a    working database connection. Make sure you have not only health-enabled=true    but also metrics-enabled=true set in your configuration, to enable the    database check, resulting in an effective readiness probe. It will return    HTTP status-code 503 and a status of DOWN when the database connection is not    in a healthy state.  Expect more enhancements in this area in the future. For more information, see the   CHANGES AFFECTING DEVELOPERS  Keycloak undergoes large refactoring, which impacts existing code. Some of these changes require updates to existing code. These are in more detailed described below.  RATIONALE FOR CHANGES  Keycloak has several limitations; for example, downtime is needed for upgrading a Keycloak cluster. To address the limitations, an in-depth refactor has been initiated.  The changes in this version are mostly attached to storage refactoring and a preparation of a new storage, called map storage. This storage will eventually replace the current storage, which will be called a legacy store with this version. The legacy store will still be available in Keycloak for several more versions.  The new store imposes a strict separation of responsibility between the service and storage layers. For that reason, the service layer’s visibility of an object’s origin will be restricted, so it will not be able to discriminate between cached or non-cached objects, or objects originating from local or federated storage.  User storage SPI will become deprecated. It will be supported for several more versions, but will be eventually replaced by the Map Storage SPI, which will offer the ability to create custom storages for any recognized area, such as users, roles, clients, or groups.  Extensions that rely on the level of detail available to services in the legacy store will need adjustment to retain this ability for the full deprecation period of the legacy store. The following section describes how that adjustment is accomplished.  Using a legacy and map store is mutually exclusive; one store cannot be used while the other is active.  CHANGES IN THE MODULE STRUCTURE  As part of introducing the new storage functionality, several public APIs around storage functionality in KeycloakSession have been consolidated, and some have been deprecated and will be removed in one of the next versions. Three new modules have been introduced, and data-oriented code from server-spi, server-spi-private, and services modules have been moved there:  org.keycloak:keycloak-model-legacy  Contains all public facing APIs from the legacy store, such as the User Storage API.  org.keycloak:keycloak-model-legacy-private  Contains private implementations that relate to user storage management, such as storage *Manager classes.  org.keycloak:keycloak-model-legacy-services  Contains all REST endpoints that directly operate on the legacy store, and have no meaning in the new store.  These modules will be available as long as legacy stores will be supported. After that period, they will be removed.  CHANGES IN KEYCLOAKSESSION  KeycloakSession has been simplified. Several methods have been deprecated in KeycloakSession and will be removed in a future version.  KeycloakSession session contains several methods for obtaining a provider for a particular object type, such as for a UserProvider there are users(), userLocalStorage(), userCache(), userStorageManager(), and userFederatedStorage(). This situaton may be confusing for the developer who has to understand the exact meaning of each method, and depends on current store layout. The new store does not distinguish federated from local storage.  For those reasons, only the users() method will be kept in KeycloakSession, and should replace all other calls listed above. The rest of the methods are deprecated, and will eventually be removed. The same pattern of deprecation applies to methods of other object areas, such as clients() or groups(). All methods ending in *StorageManager() and *LocalStorage() now throw an exception when being called, as there is no direct replacement in the new store. The next section describes how to migrate those calls to the new API or use the legacy API while using the old store.  The deprecated methods in KeycloakSession will be removed in a future release. The keycloak-model-legacy-* modules will be available for a longer time and will eventually be removed.  MIGRATING EXISTING PROVIDERS THAT DO NOT DEPEND ON THE LEGACY STORE  The existing providers need no migration if they do not call a deprecated method, which should be the case for most providers.  If the provider uses deprecated methods, but does not rely on local versus non-local storage, changing a call from the now deprecated userLocalStorage() to the method users() is the best option. Be aware that the semantics change here as the new method involves a cache if that has been enabled in the local setup.  Before migration: accessing a deprecated API that now throws an exception  session.userLocalStorage();  After migration: accessing the new API caller does not depend on the legacy storage API  session.users();  MIGRATING EXISTING PROVIDERS THAT DEPEND ON THE LEGACY STORE  In the rare case when a custom provider needs to distinguish between the mode of a particular provider, access to the deprecated objects is provided by using the LegacyStoreManagers data store provider. This option will be available only if the legacy modules are part of the deployment.  Before migration: accessing a deprecated API that now throws an exception  session.userLocalStorage();  After migration: accessing the old functionality via the LegacyStoreManagers API  ((LegacyDatastoreProvider) session.getProvider(DatastoreProvider.class)).userLocalStorage();  Some user storage related APIs have been wrapped in org.keycloak.storage.UserStorageUtil for convenience.  CREATING CUSTOM STORAGE PROVIDERS  The API for creating a custom storage provider has not been fully stabilized yet, though it is available as a tech preview. See the MapStorageProvider SPI and its Javadoc for details. The availability of the new API is a priority for the next Keycloak version.  CHANGES TO REALMMODEL  The methods getUserStorageProviders`, getUserStorageProvidersStream, getClientStorageProviders, getClientStorageProvidersStream, getRoleStorageProviders and getRoleStorageProvidersStream have been removed. Code which depends on these methods and runs with the legacy storage enabled should cast the instance as follows:  Before migration: code will not compile due to the changed API  realm.getClientStorageProvidersStream()...;  After migration: cast the instance to the legacy interface  ((LegacyRealmModel) realm).getClientStorageProvidersStream()...;  Similarly, code that used to implement the interface RealmModel and wants to provide these methods should implement the new interface LegacyRealmModel. This interface is a sub-interface of RealmModel and includes the old methods:  Before migration: code implements the old interface  public class MyClass extends RealmModel {     /* might not compile due to @Override annotations for methods no longer present        in the interface RealmModel. /     / ... */ }  After migration: code implements the new interface  public class MyClass extends LegacyRealmModel {     /* ... */ }  INTERFACE USERCACHE MOVED TO THE LEGACY MODULE  As the caching status of objects will be trasparent to services, the interface UserCache has been moved to the module keycloak-legacy. Calls to session.userCache() will therefore return only a UserProvider, which is a breaking change.  Code that depends on the legacy implementation should access the UserCache directly. While such calls might be necessary while caching with the legacy store is used, it will not be necessary when using the new map store, as that one handles caching transparently.  Before migration: code will not compile due to a changed return type  // session.userCache() might return null, null-check omitted for brevity. session.userCache().evict(realm, user);  After migration: use the API directly  // session.getProvider(UserCache.class) might return null, null-check omitted for brevity. session.getProvider(UserCache.class).evict(realm, user);  To trigger the invalidation of a realm, instead of using the UserCache API, consider triggering an event:  Before migration: code will not compile due to a changed return type  UserCache cache = session.getProvider(UserCache.class); if (cache != null) cache.clear();  After migration: use the invalidation API  session.invalidate(InvalidationHandler.ObjectType.REALM, realm.getId());  CREDENTIAL MANAGEMENT FOR USERS  Credentials for users were previously managed using session.userCredentialManager().method(realm, user, ...). The new way is to leverage user.credentialManager().method(...). This form gets the credential functionality closer to the API of users, and does not rely on prior knowledge of the user credential’s location in regard to realm and storage.  The old APIs have been deprecated, and will only work when the legacy storage is enabled in the deployment. The new APIs will work with both old and new storages.  Before migration: accessing a deprecated API  session.userCredentialManager().createCredential(realm, user, credentialModel)  After migration: accessing the new API  user.credentialManager().createStoredCredential(credentialModel)  For a custom UserStorageProvider, there is a new method credentialManager() that needs to be implemented when returning a UserModel. As those providers run in an environment with the legacy storage enabled, those must return an instance of the LegacyUserCredentialManager:  Before migration: code will not compile due to the new method credentialManager() required by UserModel  public class MyUserStorageProvider implements UserLookupProvider, ... {     /* ... */     protected UserModel createAdapter(RealmModel realm, String username) {         return new AbstractUserAdapter(session, realm, model) {             @Override             public String getUsername() {                 return username;             }         };     } }  After migration: implementation of the API UserModel.credentialManager() for the legacy store.  public class MyUserStorageProvider implements UserLookupProvider, ... {     /* ... */     protected UserModel createAdapter(RealmModel realm, String username) {         return new AbstractUserAdapter(session, realm, model) {             @Override             public String getUsername() {                 return username;             }              @Override             public SubjectCredentialManager credentialManager() {                 return new LegacyUserCredentialManager(session, realm, this);             }         };     } }   DEPRECATED PODDISRUPTIONBUDGET IN THE LEGACY KEYCLOAK OPERATOR  With this release, we have deprecated podDisruptionBudget field in the Keycloak CR of the . This optional field will be ignored when the Operator is deployed on Kubernetes version 1.25 and higher.  As a workaround, you can manually create the Pod Disruption Budget in your cluster, for example:  apiVersion: policy/v1 kind: PodDisruptionBudget metadata:   labels:     app: keycloak   name: keycloak spec:   maxUnavailable: 1   selector:     matchLabels:       component: keycloak  See also the .   DEPLOYMENT CHANGES IN THE NEW KEYCLOAK OPERATOR  The new Keycloak Operator now uses StatefulSet instead of Deployment for Keycloak deployments. There’s no automated migration in place given the Operator is a tech preview in this release. If you are using the new Operator with 18.0.z, please make sure to back up, delete and recreate your Keycloak CR after the upgrade to 19.0.0.   ALL RESOLVED ISSUES   NEW FEATURES   * Operator release notes for KC 19.0.0 keycloak-documentation  * Document changes in health and metrics endpoint keycloak-documentation  * \"ACR to LoA Mapping\" field missing from realm settings > login tab    keycloak-admin-ui  * Make sure operator tests work with pre-built operator image keycloak operator  * Support for post_logout_redirect_uris in OIDC client registration keycloak  * Support logging-gelf feature for centralized log management system keycloak    dist/quarkus  * Move ClusterProvider to the legacy module keycloak storage  * Promote new admin console to default keycloak   ENHANCEMENTS   * JavaScript Provider quickstarts on Java 17 keycloak-quickstarts  * Remove adapters that are EOL from docs keycloak-documentation  * Ability to require email to be verified before changing    keycloak-documentation  * Release notes for Keycloak 19 keycloak-documentation  * JavaScript Providers on Java 17 keycloak-documentation  * Documentation for latest logout changes keycloak-documentation  * Document changes to configuration and startup with --optimized    keycloak-documentation  * Fine Grained Permissions Custom User Creation Role keycloak-admin-ui  * make routes lower case only keycloak-admin-ui  * Update Credentials tab to support Client Secret Rotation feature    keycloak-admin-ui section/clients  * Add \"Clear Cache\" functions keycloak-admin-ui section/masthead  * Fine-grained Permissions Screens keycloak-admin-ui section/other  * Restrict screens based on Fine-grained Permissions keycloak-admin-ui    section/other  * i18n readiness keycloak-admin-ui section/other  * Introduce Resource Type in scope based permissions keycloak-admin-ui    section/clients  * Show Authentication Flow-Bindings in Flow list keycloak-admin-ui    section/authentication  * Make provider information visible in new admin-console keycloak-admin-ui    section/masthead  * Improvements to Learn More Links keycloak-admin-ui  * Update translations before Milestone 19 keycloak-admin-ui  * Support for post_logout_redirect_uris in OIDC client registration    keycloak-admin-ui section/clients  * Better message when using wrong Java version keycloak dist/quarkus  * Include WebAuthn tests to GH Actions keycloak testsuite  * Prevent lookup of client service account when feature is disabled keycloak  * Reduce number of required options when running export and import commands    keycloak dist/quarkus  * Enable Cross DC support for quarkus based keycloak distribution keycloak    dist/quarkus  * Run tests on Windows Runner keycloak dist/quarkus  * Improve how values are set when using shell special characters keycloak    dist/quarkus  * Review QuarkusLiquibaseConnectionProvider based on the last updates to    Wildfly version keycloak dist/quarkus  * Make sure that OIDC conformance testsuite passes for logout and normal    profiles keycloak oidc  * Exit code 143 when running using systemd keycloak docs  * Changing the `start` command to run `auto-build` by default keycloak    dist/quarkus  * Polish the operator code keycloak operator  * Include 'urn:ietf:params:oauth:grant-type:token-exchange' in    grant_types_supported field of Keycloak OP metadata, if token-exchange is    enabled keycloak  * Upgrade Resteasy v4 keycloak  * Remove support for IE keycloak  * Properly enable/disable metrics and health endpoints keycloak dist/quarkus  * Cannot use a nested claim value for Regex comparison in a Regex Policy in    Authorization Services keycloak authorization-services  * Remove JBoss community logo from welcome page keycloak  * Ability to require email to be verified before changing keycloak  * Refactor BouncyIntegration keycloak  * Clarify `transaction-xa-enabled` and add `transaction-jta-enabled` keycloak  * More information in the proxy guide about exposing the administration console    keycloak dist/quarkus  * Throw exception in deprecated `KeycloakSession` methods keycloak storage  * Quarkus / map store integration: ConcurrentHashMap keycloak storage  * Allow to disable JPA completly keycloak  * Integrate the JPA map store keycloak  * Activate JPA Map store for usersessions in Quarkus keycloak storage  * Adjust configuration guide to reflect changes to startup behaviour    (--optimized instead of --auto-build) keycloak docs  * Change the `--optimise` option to `--optimized` keycloak  * Make *:8787 the default for the \"address\" field using --debug keycloak    dist/quarkus  * Remove `KeycloakIntegratorProvider` after last changes to map-jpa keycloak    storage  * Unsupported options only shown when using help-all keycloak  * Allow Quarkus Map storage to configure stores for different areas keycloak    storage  * Add prefix to the area Map storage options for Quarkus keycloak storage   BUGS   * Update user-storage-jpa to work with the new distribution    keycloak-quickstarts  * KEYCLOAK-15988 keycloak-admin-ui section/realm settings  * `Query supported extensions` missing from LDAP provider keycloak-admin-ui    section/identity providers  * Reinstate missing OIDC endpoints keycloak-documentation  * Broken cross-reference in recovery code topic keycloak-documentation  * [UX Review] Users > role mappings: the inherited relationship doesn't show    correctly keycloak-admin-ui ux-review  * Update admin console documentation links keycloak-admin-ui documentation  * Many controls enabled when user has view-* access keycloak-admin-ui    section/other  * Authorization tab never shown for realm-management client keycloak-admin-ui    section/clients  * Missing attributes to support step up authentication keycloak-admin-ui    section/clients  * \"Decision strategy\" at Authorization > Settings displays wrong value    keycloak-admin-ui section/clients  * Filter by Origin not working on User --> Role mapping --> Assign roles    keycloak-admin-ui section/users  * \"Test authentication\" doesn't work for an existing user federation provider    (LDAP) keycloak-admin-ui section/user federation  * \"Group\" field is blank for existing hardcoded-ldap-group-mapper    keycloak-admin-ui section/user federation  * Pagination doesn't work on Client > Authorization tab keycloak-admin-ui    section/clients  * Permission editor shows resource IDs instead of names keycloak-admin-ui    section/clients  * Authorization resource page displays incorrect associated scope based    permissions keycloak-admin-ui section/clients  * [UX Review] Validators are only allowed to be added once in the User profile    keycloak-admin-ui section/realm settings  * Import client doesn't pass \"publicClient\" attribute. keycloak-admin-ui    section/clients  * Sessions screen - clients links broken keycloak-admin-ui section/sessions  * User page not loaded in admin console v2 having only roles \"view-users,    manage-users\" keycloak-admin-ui section/users  * Client specific Mapper configuration missing keycloak-admin-ui    section/clients  * filtering client-scope assign dialog makes dialog empty keycloak-admin-ui    section/clients  * Clients-->Authorization-->Permission details shows permissions in Policies    dropdown keycloak-admin-ui section/clients  * X-Frame-Options url not found keycloak-admin-ui section/realm settings  * Default Groups keycloak-admin-ui section/groups  * Permissions tab breaks groups in test realm keycloak-admin-ui section/groups  * Problems with Role mapping tab keycloak-admin-ui section/groups  * [UX Review] The changes of Actions menu in LDAP user federation    keycloak-admin-ui section/user federation  * [UX Review] ”Always Read Value From LDAP“ is missing keycloak-admin-ui    section/user federation  * [UX Review] Add the \"Delete\" action in the mapper details page    keycloak-admin-ui section/user federation  * [UX Review] Add \"Permissions\" tab into the Identity provider    keycloak-admin-ui section/identity providers  * [UX Review] The \"Delete\" is missing in the Identity provider's mappers page    keycloak-admin-ui section/identity providers  * Broken link after group search keycloak-admin-ui section/groups  * \"Terms and conditions\" and other required actions not available for user    keycloak-admin-ui section/users  * [UX Review] \"Use lower-case bearer type in token responses\" is missing the    Advanced settings. keycloak-admin-ui section/clients  * [UX Review] “Default ACR Values” is missing in the Advanced settings of    client keycloak-admin-ui section/clients  * [UX Review] There is no \"Logout settings\" in the SAML client    keycloak-admin-ui section/clients  * SMTP configuration adds authentication instead of auth keycloak-admin-ui    section/realm settings  * Use authServerUrl instead of authUrl to initialize Keycloak Admin Client    keycloak-admin-ui section/other  * [UX Review] Add the \"Edit\" action for custom flow keycloak-admin-ui    section/authentication  * Alerts for Disable/Enable Realm Settings for Login is not correct    keycloak-admin-ui section/realms  * User Profile - Error when enable \"User Profile\" - \"Danger    alert:config2.attributes is undefined\" keycloak-admin-ui section/realms  * User Profile - Attribute \"Required\" flag can't be removed via UI    keycloak-admin-ui section/realms  * User Profile - Group is unable to be assigned to an Attribute + All group are    deleted keycloak-admin-ui section/realms  * [UX Review] The help text is not visible keycloak-admin-ui  * [UX Review] The \"Show authorization data\" is missing keycloak-admin-ui    section/clients  * Error message in User Federation provider is not user friendly    keycloak-admin-ui section/user federation  * Client --> Settings form cut off at bottom keycloak-admin-ui section/clients  * Identity providers: Selecting provider name is throwing an error    keycloak-admin-ui section/identity providers  * Client scopes > Mappers > \"Configure a new mapper\" dialog has possibly    incorrect heading keycloak-admin-ui section/client scopes  * Create profile/policy: Headings consistency keycloak-admin-ui section/realm    settings  * Realm settings > Partial export dialog accessed from Action dropdown    keycloak-admin-ui section/realm settings  * [Accessibility Review] Critical - Client scopes page issues keycloak-admin-ui    section/client scopes  * [Accessibility Review] Critical - Users page issues keycloak-admin-ui    section/users  * [Accessibility Review] Critical - Groups page issues keycloak-admin-ui    section/groups  * [Accessibility Review] Critical - Realm settings page issues    keycloak-admin-ui section/realm settings  * [Accessibility Review] Critical - Authentication page issues    keycloak-admin-ui section/authentication  * [Accessibility Review] Critical - Identity providers page issues    keycloak-admin-ui section/identity providers  * [Accessibility Review] Critical - User federation page issues    keycloak-admin-ui section/user federation  * [Accessibility Review] Serious - SideNav page issues keycloak-admin-ui    section/other  * [Accessibility Review] Serious - Realm settings page issues keycloak-admin-ui    section/realm settings  * [Accessibility Review] Serious - Authentication page issues keycloak-admin-ui    section/authentication  * Misspelling in OIDC Client section keycloak-admin-ui section/clients  * Identity providers syncMode defaults to import in lower case    keycloak-admin-ui section/identity providers  * [UX Review] Can't use the Resource type to evaluate authorization    keycloak-admin-ui section/clients  * Realm selector styles are broken in production build keycloak-admin-ui  * Client authentication fails when using signed JWT, if the JWA signing    algorithm is not RS256 keycloak oidc  * PAR logic affecting /auth endpoint keycloak oidc  * Client secret length should be adjusted based on select signature algorithm    keycloak oidc  * Dist.X: Show-Config does not show always the right applied configuration    keycloak dist/quarkus  * Script providers not working on OpenJDK 17 due to Nashorn being deprecated    keycloak core  * The `/auth` base path should be adjusted in v17 docs pages keycloak    dist/quarkus  * Re-augmentation is recording runtime properties as runtime default values    keycloak dist/quarkus  * Custom provider throws java.lang.NoSuchMethodError:    'org.jboss.resteasy.spi.ResteasyUriInfo    org.jboss.resteasy.spi.HttpRequest.getUri() keycloak dist/quarkus  * Flaky Operator tests keycloak operator  * ciba http auth channel sends client_id and client_secret via delegation    request keycloak oidc  * /clients-registrations API doesn't return secret anymore and is not coherent    keycloak oidc  * Empty secret for imported private client keycloak oidc  * Keycloak liveness probe behaves as readiness probe keycloak dist/quarkus  * ID token encryption without specifying id_token_encrypted_response_enc does    not follow OIDC Dynamic Client Registration specification keycloak oidc  * Deprecated org.keycloak.jose.jws.Algorithm is used in    OIDCAdvancedConfigWrapper keycloak oidc  * Fix Device Authorization Grant error responses returned as HTML instead of    JSON keycloak oidc  * User Profile: Empty permissions in JSON configuration prohibit update of    username and email keycloak user-profile  * Logout confirm page is failing to log the user out on auth-server-wildfly    keycloak testsuite  * HardcodedLDAPRoleStorageMapper and HardcodedLDAPGroupStorageMapper ignore    composite roles when checking whether user has role (was KEYCLOAK-18308)    keycloak  * Not documented breaking API change for client creation keycloak oidc  * Implementation of OAuth2 authentication with HTTP Basic authentication scheme    not RFC6749 compliant keycloak oidc  * the param id_token_hint in OpenID Connect Logout keycloak oidc  * Changing locale on logout confirmation strips redirect_uri parameter keycloak    oidc  * Keycloak does not support POST method mentioned in latest OIDC RP-Initiated    Logout specs draft keycloak oidc  * Account REST endpoint does not respect view permission settings from user    profile on lastName and firstName keycloak account/api  * IDP with PKCE: Token-Request body contains non-standard parameter keycloak    oidc  * Possible client enumeration in the authorization endpoint keycloak oidc  * Cannot find ScriptEngine for JDK8 and Wildfly keycloak testsuite  * Client Policies: pkce-enforcer executor with client-access-type condition is    not applied on client change via Admin API keycloak oidc  * OAuth2 device polling interval default set to wrong value keycloak oidc  * Token endpoint: HTTP 500 unknown error when using client credentials grant    type with encrypted id_token but without a encryption key. keycloak oidc  * Unable to start KC server for auth-server-quarkus on Windows machine keycloak    testsuite  * DeviceTokenRequestContext.getEvent returns a wrong ClientPolicyEvent keycloak    oidc  * `KerberosLdapTest` is failing on Undertow keycloak  * Authorization Permission Mismatch in RPT and Permission Ticket keycloak    authorization-services  * AuthzClient fails if it can not access the frontend-url keycloak    authorization-services  * Keycloak accepts a client scope name that violates OAuth2.0 scope-token    definition rule keycloak oidc  * No secret provided for dynamically registered client using client_secret_jwt    method in Keycloak 18 keycloak oidc  * CIBA flow : no error on invalid scope keycloak oidc  * NullPointerException on exchange of client-credentials obtained token    keycloak token-exchange  * OIDC logout fails without id_token_hint keycloak oidc  * Cannot use WebAuthn with WildFly distribution keycloak dist/wildfly  * Profile not properly reseted when running the testsuite keycloak testsuite  * Partial import feature does not import Identity Provider mappers in Keycloak    keycloak  * Unused import statements in classes related to device flow keycloak  * Problem with default for configuration option log-file keycloak dist/quarkus  * When running JPA Map liquibase changeset, don't log the on the console    keycloak storage  * JPA Map storage concurrent execution of liquibase updates keycloak storage  * Fails to update a client with JPA Map store keycloak storage   UPGRADING  Before you upgrade remember to backup your database and check the for anything that may have changed."
}