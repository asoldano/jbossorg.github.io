{
  "title": "Codeanywhere adventures - Creating your first container project (part 2)",
  "link": "http://feedproxy.google.com/~r/schabell/jboss/~3/mgad4uEIJw4/codeanywhere-adventures-creating-your-first-container-project-part2.html",
  "author": [
    {
      "name": "Eric D. Schabell",
      "avatar": null
    }
  ],
  "date": "2021-10-07T05:00:00.039Z",
  "feed_title": "Eric D. Schabell",
  "feed_avatar": "https://www.gravatar.com/avatar/c4b562a3796ce4736927992c6daa4567?s=50",
  "content": "In the , we introduced the world of , a cloud IDE and container development experience all available in just your browser.   Are you ready for some more amazing, easy to use, developer tooling that requires not a single tooling installation and no configuration?     That's what the team at  are promising us when I stumbled on their website last week. They \"...don't require you to engage in complex installations and configuration setups. Simply access our in-browser IDE for everything you need to build amazing websites in a productive and more developer-friendly way.\"  In part two of this series, we'll get hands-on creating our first Java container project in .  From , you should be logged in and in your to get started. From here we'll be creating our first Java container project.     THE DASHBOARD  After logging in to the site, you can  view. It presents the view to get started and reminds you that you have not yet created your first container. When you create a container you are then staring your first development project, that's end-to-end based on language type selection which will generate a project in your IDE and link that directly to a container to be deployed when you are ready.  Let's select a Java container project by clicking on CREATE CONTAINER.      We can select the type of project (aka container) we want to use, in our case Java, by scrolling down the list of available containers. We won't select 'always on' check box as we don't need that kind of service for our development testing. Finally we give it a name, PROCESS AUTOMATION TOOLING, and click on CREATE button.    Now the magic starts to happen as the project is created for you, a container is spun up, and linked to your  browser-based IDE. It's pretty fast and you might have missed the fact that the IDE is launched with your Java project layout in a new tab in your browser. Also, back in the tab hosting the Dashboard view, you'll find a new container has been listed that you created.      Now let's look closer at the  IDE tab where we find an empty workspace that is waiting for you to pull in the project or start setting up one yourself. Also they were so kind as to present a GETTING STARTED tab with the essential details of the development tooling stack available to you in this container, the resource allocation available to you, how to remotely access the running container through SSH, and the URL's for accessing the deployed project once you develop something.    Even more interesting, you've been provided a panel at the bottom of the IDE which is already logged into the running container, saving you the trouble. Very slick indeed!    Now the  configuration settings allow you to connect any manner of existing tooling such as Github, Bitbucket, Google, OneDrive, to name just a few, but I am a Gitlab user so I'm going to use that console at the bottom of my IDE tab and clone my project into the workspace:  $ git clone https://gitlab.com/bpmworkshop/rhpam-install-demo.git   You see the project is brought into the IDE and automatically recognised by the EXPLORER view of our workspace.    This completes part two of the  adventures, where we got started with your first browser based Java project with a fully hosted container experience.   Next up, part three takes us through the installation and deployment of the process automation tooling for developers.     "
}